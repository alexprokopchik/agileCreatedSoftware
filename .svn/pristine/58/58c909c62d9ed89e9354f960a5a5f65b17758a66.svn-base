package view;

import java.awt.BorderLayout;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import controller.SerializableController;
import model.AccountDatabase;
import model.Conference;
import model.ConferenceDatabase;
import model.Paper;
import model.Recommendation;
import model.Review;
import model.User;

import java.awt.Color;

/**
 * Used by subprogram chair, lists all the papers the subprogram is assigned to.
 * 
 * @author Harmeet Singh
 * 
 */
public class PCPaperPanel extends JPanel {

	
	private static final long serialVersionUID = 7753693743712038724L;
	private static final Dimension SIZE = new Dimension(100, 20);
	private Paper paper;
	private User user;	
	private AccountDatabase actDB;
	private ConferenceDatabase conDB;
	private Conference conference;
	
	private JButton assignSubPC;
	private JButton viewReviewRecomm;
	private JButton viewPaperButton;
	private JButton acceptReject;
	/**
	 * The constructor for the program chair paper panel.
	 * 
	 * @param programChairPanel the program chair panel
	 * @param u The User
	 * @param p The Paper
	 * @param theActDB Account Database
	 * @param theConDB Conference Database
	 */
	public PCPaperPanel(ProgramChairPanel programChairPanel, User u, Paper p, AccountDatabase theActDB, final ConferenceDatabase theConDB) {
		super();
		setOpaque(false);
		user = u;
		paper = p;
		actDB = theActDB;
		conDB = theConDB;

		conference = conDB.getConferences().get(u.getConference().getConferenceId());

		viewPaperButton = new JButton("View Paper");
		acceptReject = new JButton("Accept/Reject");
		assignSubPC = new JButton("Assign SubProgram Chair");
		viewReviewRecomm = new JButton("View Review/Recomm");			

		this.setPreferredSize(new Dimension(800, 50));
		this.setMaximumSize(new Dimension(800, 50));
		
		addComponents();
	}

	private void addComponents() {
		JLabel title = new JLabel();
		title.setForeground(Color.YELLOW);
//		title.setHorizontalTextPosition(SwingConstants.CENTER);
//		title.setHorizontalAlignment(SwingConstants.CENTER);
		// title.setSize(SIZE);
		title.setText(paper.getTitle());

		JLabel author = new JLabel();
		author.setForeground(Color.YELLOW);
//		author.setHorizontalTextPosition(SwingConstants.CENTER);
//		author.setHorizontalAlignment(SwingConstants.CENTER);
//		author.setPreferredSize(SIZE);
//		author.setSize(SIZE);
		author.setText(paper.getAuthor());

		JButton reviewer = new JButton("Reviews");
//		reviewer.setHorizontalTextPosition(SwingConstants.CENTER);
//		reviewer.setHorizontalAlignment(SwingConstants.CENTER);
//		reviewer.setPreferredSize(SIZE);
//		reviewer.setSize(SIZE);
		List<User> val = paper.getReviewers();
		reviewer.setText(val.toString());

//		StringBuilder string = new StringBuilder("");
//		for (int i = 0; i < val.size(); i++) {
//			string.append(val.get(i).getUserName());
//		}
//		System.out.println(string);
//		reviewer.setText(string.toString());
//		reviewer.setForeground(Color.YELLOW);
//		reviewer.setHorizontalTextPosition(SwingConstants.CENTER);
//		reviewer.setHorizontalAlignment(SwingConstants.CENTER);
//		reviewer.setSize(SIZE);
		
//		JLabel status = new JLabel();
//		status.setForeground(Color.YELLOW);
//		status.setHorizontalTextPosition(SwingConstants.CENTER);
//		status.setHorizontalAlignment(SwingConstants.CENTER);
//		status.setSize(SIZE);
//		String result = "Not Assigned";
//		List<Review> revs = paper.getReviews();
//		// System.out.println("revs size " + revs.size());
//		List<User> reviewers = paper.getReviewers();
//		// System.out.println("reviewers size " + reviewers.size());
//		for (int i = 0; i < revs.size(); i++) {
//			System.out.println("revs " + revs.get(i));
//			System.out.println("reviewers " + reviewers.get(i).getUserName());
//			if (reviewers.get(i).getUserName().equals(user.getUserName())) {
//				result = "Reviewed";
//			}
//		}
//		status.setText(result);

		addListeners();

		this.add(title);
		this.add(author);		
//		this.add(status);
		this.add(viewPaperButton);
		if (!(paper.getReviewers() == null)) {
			String rev = "";
			List<User> pp = paper.getReviewers();
			for (int i = 0; i < pp.size(); i++) {
				rev += pp.get(i).getUserName();
			}
			reviewer.setText(rev);
		}
		this.add(reviewer);
		this.add(acceptReject);
		if (!(paper.getSubProgramChair() == null)) {
			assignSubPC.setText(paper.getSubProgramChair());
			assignSubPC.setEnabled(false);
		}
		this.add(assignSubPC);
	}

	/**
	 * Action listener for view button and submit reccomendation button
	 */
	private void addListeners() {
		viewPaperButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				viewPaper();
			}
		});

		acceptReject.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				submitRecomm();
			}
		});
		
		viewReviewRecomm.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				List<Review> reviewList = paper.getReviews();
				for (int a = 0; a < reviewList.size(); a++) {
					Review eachReview = reviewList.get(a);

				}

			}
		});
		
		assignSubPC.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// List<Paper> papers = conference.getPapers();
				// Object possible[] = new Object[papers.size()];
				// int i = 0;
				// for(Paper p: papers) {
				// System.out.println(p.getTitle() + " has " +
				// p.getReviewers().size() + " reviewers");
				// if(p.getReviewers().size() < 4) {
				// possible[i] = p.getTitle();
				// i++;
				// }
				// }
				// Object choice = JOptionPane.showInputDialog(null,
				// "Choose Paper", "Paper", JOptionPane.PLAIN_MESSAGE, null,
				// possible, 0);
				// System.out.println(choice);
				// Paper thePaper = null;
				// for(Paper p: papers) {
				// if(p.getTitle().equals(choice)){
				// thePaper = p;
				// break;
				// }
				// }
				List<User> subPC = conference.getSubprogramChairs();
				Object[] allSubPC = new Object[subPC.size()];
				int i = 0;
				for (User u : subPC) {
					if (!paper.getAuthor().equals(u.getUserName())) { // checks
																		// if
																		// the
																		// sub
																		// PC is
																		// same
																		// as
																		// author,
																		// he
																		// doesnt
																		// get
																		// listed
																		// as
																		// possible
																		// Sub
																		// PC
						List<Paper> UPapers = u.getPaper();
						int size = 0;
						for (Paper p : UPapers) {
							if (!p.getAuthor().equals(u.getUserName())) {
								size++;
							}
						}
						if (size <= 4) {
							allSubPC[i] = u.getUserName(); // added to the
															// possible sub PC
							i++;
						}
					}
				}
				Object theR = JOptionPane.showInputDialog(null,
						"Choose a reviewer for this paper",
						"Reviewer for Paper", JOptionPane.PLAIN_MESSAGE, null,
						allSubPC, 0);
				System.out.println(theR);
				User revU = actDB.getAccounts().get(theR)
						.getUserConfId(conference.getConferenceId());
				revU.addObserver(new SerializableController());
				paper.setSubProgramChair(revU.getUserName());
				revU.addPaper(paper); // adding for review
				actDB.add(actDB.getAccounts().get(revU.getUserName()));
				actDB.update();
				conDB.update();
				// spc.update();
			}
		});
	}

	/**
	 * Actual work performed in order to submit a recommendation
	 */
	private void submitRecomm() {

		final JFrame reviewFrame = new JFrame("Recommendation");
		final AcceptancePanel aPanel = new AcceptancePanel(reviewFrame, user, paper);
//		final RecommendationPanel recPanel = new RecommendationPanel(
//				new Recommendation());
//		// final ReviewPanel reviewPanel = new ReviewPanel(review);
		JPanel tempOuter = new JPanel(new BorderLayout());
//
		tempOuter.add(aPanel);
//		JButton sumbitButton = new JButton("Submit Recommendation");
//		sumbitButton.addActionListener(new ActionListener() {
//
//			@Override
//			public void actionPerformed(ActionEvent arg0) {
//				JOptionPane.showMessageDialog(null,
//						"Please select the paper for this recommendation.");
//				JFileChooser fc = new JFileChooser("papers\\"
//						+ user.getUserName() + "\\");
//				int returnVal = fc.showOpenDialog(null);
//
//				if (returnVal == JFileChooser.APPROVE_OPTION) {
//					File f = fc.getSelectedFile();
//					recPanel.sumbitRec(user, new Paper(f, user.getUserName(),
//							user.getConference()));
//				}
//			}
//		});

		//tempOuter.add(sumbitButton, BorderLayout.SOUTH);
		reviewFrame.getContentPane().add(tempOuter);
		// reviewFrame.pack();
		// reviewFrame.setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
		reviewFrame.setMinimumSize(new Dimension(400, 500));
		reviewFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		reviewFrame.setVisible(true);

	}

	/**
	 * The actual work performed in order to view a paper
	 */
	private void viewPaper() {
		File path = paper.getPaper();
		Desktop desktoptool = Desktop.getDesktop();

		try {
			desktoptool.open(path);
		} catch (IOException e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(this, "Error Viewing the File");
		}
	}
}
